// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ShortenedLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  slug      String   @unique
  clicks    Int      @default(0)
}

model Pastebin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  language  String
  content   String   @db.MediumText
  slug      String   @unique
  clicks    Int      @default(0)
}

model Incident {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive          Boolean?
  fromTwitterHandle String
  tweetId           String   @unique
  updates           Int      @default(0)
  tweetUpdatedAt    DateTime @default(now())
  content           String   @db.MediumText

  lat Float
  lng Float

  location String
  time     DateTime @default(now())
  type     String
  severity String?
  summary  String   @db.MediumText

  @@index([time, severity], name: "time_severity")
}

model DocumentTranslation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key     String
  keyType String @default("free") // free, paid

  filename       String
  sourceLanguage String
  targetLanguage String
  documentId     String  @unique
  documentKey    String
  status         String  @default("pending") // pending, completed, failed
  error          String?

  @@index([key, keyType], name: "key_keyType")
}
